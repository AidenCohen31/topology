#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
A script to print out information about the OSG topology
"""

import os
import sys
import fnmatch
import argparse

if __name__ == "__main__" and __package__ is None:
    _parent = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    sys.path.append(_parent + "/src")

import topology_utils


def list_resource_contacts(args):
    """
    List resource contacts for OSG.
    """
    if args.fqdn:
        results = topology_utils.get_resource_contacts_by_fqdn(args)
    else:
        results = topology_utils.get_resource_contacts(args)
    if args.fqdn:
        print_contacts(args, 'FQDN', results)
    else:
        print_contacts(args, 'Resource', results)


def list_vo_contacts(args):
    """
    List VO contacts for OSG.
    """
    results = topology_utils.get_vo_contacts(args)
    print_contacts(args, 'VO', results)


def list_contacts(args):
    """
    List resource and VO contacts for OSG.
    """
    if args.output_mode == "email":
        results = topology_utils.get_resource_contacts(args)
        results.update(topology_utils.get_vo_contacts(args))
        print_contacts(args, 'combined', results)
    else:
        list_resource_contacts(args)
        list_vo_contacts(args)


def print_contacts(args, contacttype, results):
    """
    Print contacts of given contacttype with the given results
    """
    results = topology_utils.filter_contacts(args, results)

    if args.output_mode == "email":
        emails = set()
        for name in results.keys():
            for contact in results[name]:
                if 'Email' in contact:
                    emails.add(contact['Email'])
        emails = list(emails)
        emails.sort()
        hadone = False
        for email in emails:
            if hadone:
                sys.stdout.write(' ')
            else:
                hadone = True
            sys.stdout.write(email)
        sys.stdout.write('\n')
    else:
        names = sorted(results.keys())
        for name in names:
            print("- %s: %s" % (contacttype, name))
            keys = set()
            for contact in results[name]:
                key = None
                if 'Name' in contact and 'Email' in contact:
                    key = "%s <%s>" % (contact['Name'], contact['Email'])
                elif 'Name' in contact:
                    key = contact['Name']
                if key:
                    keys.add(key)
            for key in sorted(keys):
                print(u"  * %s" % key)


def get_parser():
    """
    Return a parser object useable for interacting with OSG topology services.
    """
    oparser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]),
                                      add_help=True)
    oparser.add_argument("--host", dest="host", default="topology.opensciencegrid.org",
                         help="Remote topology host (default topology.opensciencegrid.org)")
    oparser.add_argument("--cert", dest="cert", help="Client certificate")
    oparser.add_argument("--key", dest="key", help="Client certificate private key")

    subparsers = oparser.add_subparsers(dest="which")

    contactparsers = []

    list_resource_contacts_parser = \
        subparsers.add_parser('list-resource-contacts',
                              help='List OSG contacts by resource name.')
    contactparsers.append(list_resource_contacts_parser)
    list_resource_contacts_parser.add_argument( \
        "--service",
             dest="provides_service", help="Filter on resources that provide given "
            "service(s)")
    list_resource_contacts_parser.add_argument("--vo",
        dest="owner_vo", help="Filter on resources that list VO(s) as a "
        "partial owner")
    list_resource_contacts_parser.add_argument(dest="filter", action="store",
        nargs="?", help="Shell expression filter on the resource name or FQDN")
    list_resource_contacts_parser.add_argument("--fqdn", dest="fqdn", default=False, action="store_true",
        help="Treat the filter as an FQDN instead of a resource name")

    list_vo_contacts_parser = subparsers.add_parser('list-vo-contacts',
        help='List OSG contacts by VO name.')
    contactparsers.append(list_vo_contacts_parser)
    list_vo_contacts_parser.set_defaults(fqdn=False)
    list_vo_contacts_parser.add_argument(dest="filter", action="store",
        nargs="?", help="Shell expression filter on the VO name")

    list_contacts_parser = subparsers.add_parser('list-contacts',
        help='List OSG resource and VO contacts.')
    contactparsers.append(list_contacts_parser)
    list_contacts_parser.add_argument(dest="filter", action="store",
        nargs="?", help="Shell expression filter on the VO name, resource name or FQDN")
    list_contacts_parser.add_argument("--fqdn", dest="fqdn", default=False, action="store_true",
        help="Treat the filter as an FQDN instead of a resource name")

    for parser in contactparsers:
        parser.add_argument("--type", default="all",
            dest="contact_type", help="Filter on contact type "
            "(e.g. administrative, miscellaneous, security, or submitter; "
            "default all)")
        parser.add_argument("--output", default="full",
                            dest="output_mode", help="Select the output mode "
                            "(email or full; default full)")
        parser.add_argument("--email-from-file",
                            default=None,
                            dest="email_file",
                            help="Path to file containing list of emails for contact filtering")

    return oparser


def main():
    """
    Main utility function for OSG topology CLI.
    """
    oparser = get_parser()

    args = oparser.parse_args()
    if not args.which:
        oparser.error(f"No command specified; see {sys.argv[0]} --help for usage")
    if getattr(args, "filter", None) is not None:
        if args.fqdn:
            args.fqdn_filter = args.filter.strip()
        else:
            args.name_filter = args.filter.strip()

    try:
        with open(args.email_file, 'r') as f:
            contents = f.read()
            args.contact_emails = contents.split('\n')
    except (AttributeError, TypeError):
        pass  # --email-from-file not specified
    except IOError as exc:
        sys.exit("Failed to read email file: %s" % exc)
    except UnicodeDecodeError as exc:
        sys.exit("Invalid unicode in email file: %s" % exc)

    commands = {"list-resource-contacts": list_resource_contacts,
                "list-vo-contacts": list_vo_contacts,
                "list-contacts": list_contacts,
               }

    command = commands[args.which]
    return command(args)


if __name__ == '__main__':
    sys.exit(main())
